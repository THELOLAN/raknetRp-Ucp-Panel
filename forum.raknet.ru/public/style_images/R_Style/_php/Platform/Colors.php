<?php
 class Platform_Colors extends Platform_Collection { public $background; public $border; public $text; protected $_output; protected $_settings; public function get_output() { $this->_load(); return $this->_output; } protected function _load() { if( $this->_settings === null ) { $elts = Platform::general()->get_color_elements(); $this->background = $elts['background']; $this->border = $elts['border']; $this->text = $elts['text']; $this->_selected = array('color' => Platform::client_preference('color')); if( $this->_selected['color'] === null ) { $this->_selected = null; } $this->_output = ''; $this->_settings = Platform::settings('colors'); $this->_process($this->_settings); } } protected function _each(&$element) { if( $element['key'] === 'pick_your_own' ) { return; } $this->_output .= '<a href="#" data-target-color="' . $element['color'] . '"><span style="background-color: ' . $element['color'] . '"></span> ' . $element['label'] . '</a>'; } protected function _selected(&$element) { } public function css() { $this->_load(); $out = ''; foreach(array('background' => 'background-color', 'border' => 'border-color', 'text' => 'color') as $type => $prop) { $parts = explode(',', $this->$type); foreach($parts as $part) { $out .= $part . ' { ' . $prop . ': ' . $this->_selected['color'] . '; }' . "\n"; } } return $out; } public function js() { $this->_load(); return 'Platform.getCore().options.colors = { background: \'' . addslashes($this->background) . '\', border: \'' . addslashes($this->border) . '\', text: \'' . addslashes($this->text) . '\' };' . "\n"; } } 