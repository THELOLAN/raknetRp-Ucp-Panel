<?php
 class Platform_General { protected $_settings; public function __construct() { $this->_settings = Platform::settings('general'); } public function board_width_css() { if( !isset($this->_settings['board']) ) { return; } $board =& $this->_settings['board']; $output = ''; if( isset($board['width']) ) { $board['width'] = trim($board['width']); $last = strlen($board['width'])-1; if( $board['width']{$last} == '%' ) { $output = '#ipboard_body .main_width, .width, .wrapper { width: ' . intval($board['width']) . '% !important; '; if( isset($board['min_width']) && $board['min_width'] !== false ) { $output .= 'min-width: ' . intval($board['min_width']) . 'px !important; '; } if( isset($board['max_width']) && $board['max_width'] !== false ) { $output .= 'max-width: ' . intval($board['max_width']) . 'px !important; '; } $output .= '}'; } else { $output = '#ipboard_body .main_width ' . (isset($board['block_elements'])? ', ' . $board['block_elements'] : '' ) . ' { width: ' . intval($board['width']) . 'px !important; }'; } $output .= "\n"; } return $output; } public function background_picker_thumb_width() { if( !isset($this->_settings['background_picker']) || !isset($this->_settings['background_picker']['thumb_width']) ) { return 80; } return intval($this->_settings['background_picker']['thumb_width']); } public function avatars_width_css() { if( !isset($this->_settings['avatars']) || !isset($this->_settings['avatars']['width']) ) { $width = 40; } else { $width = intval($this->_settings['avatars']['width']); } $out = '.sb-avatar-frame, .sb-avatar-frame img { width: ' . $width . 'px; height: ' . $width . 'px; }' . "\n"; foreach(array('forums', 'topics') as $k) { if( !isset($this->_settings['avatars']) || !isset($this->_settings['avatars']['width_in_' . $k]) ) { $width2 = $width; } else { $width2 = intval($this->_settings['avatars']['width_in_' . $k]); } $out .= '.sb-avatar-frame-in-' . $k . ', .sb-avatar-frame-in-' . $k . ' img { width: ' . $width2 . 'px; height: ' . $width2 . 'px; }' . "\n"; } return $out; } public function sidebar_css($state) { $elts = $this->get_sidebar_elements(); if( $state === 'hidden' ) { $output = '#content { box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box; }' . "\n"; } else { $output = '#content { box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box; padding-' . $elts['side'] . ': ' . $this->get_sidebar_width() . 'px; }' . "\n"; } $output .= $elts['content_element'] . ' { position: relative; }' . "\n"; $output .= $elts['element'] . ' { position: relative; width: ' . $this->get_sidebar_width() . 'px; float: ' . $elts['side'] . '; margin-' . $elts['side'] . ': -' . $this->get_sidebar_width() . 'px; }'; if( isset($elts['block_elements']) && !empty($elts['block_elements']) ) { $output .= $elts['block_elements'] . ' { width: ' . ($this->get_sidebar_width() - $elts['relative_block_inner_width']) . 'px; }' . "\n"; } return $output; } public function sidebar_js() { return 'Platform.getCore().options.sidebar_width = ' . $this->get_sidebar_width() . ';' . "\n" . 'Platform.getCore().options.sidebar_side = \'' . addslashes($this->get_sidebar_side()) . '\';'; } public function get_sidebar_width() { if( !isset($this->_settings['sidebar']) || !isset($this->_settings['sidebar']['width']) ) { return 330; } else { return intval($this->_settings['sidebar']['width']); } } public function get_sidebar_side() { return isset($this->_settings['sidebar']['side']) ? $this->_settings['sidebar']['side'] : 'right'; } public function get_sidebar_elements() { return array( 'element' => isset($this->_settings['sidebar']['element']) ? $this->_settings['sidebar']['element'] : '#ptSidebar', 'content_element' => isset($this->_settings['sidebar']['content_element']) ? $this->_settings['sidebar']['content_element'] : '#ptContent', 'side' => isset($this->_settings['sidebar']['side']) ? $this->_settings['sidebar']['side'] : 'right', 'relative_block_inner_width' => isset($this->_settings['sidebar']['relative_block_inner_width']) ? intval($this->_settings['sidebar']['relative_block_inner_width']) : 0, 'block_elements' => isset($this->_settings['sidebar']['block_elements']) ? $this->_settings['sidebar']['block_elements'] : null, 'margin' => isset($this->_settings['sidebar']['margin']) ? $this->_settings['sidebar']['margin'] : 0, ); } public function get_color_elements() { return array( 'background' => isset($this->_settings['colors']['background']) ? $this->_settings['colors']['background'] : '', 'border' => isset($this->_settings['colors']['border']) ? $this->_settings['colors']['border'] : '', 'text' => isset($this->_settings['colors']['text']) ? $this->_settings['colors']['text'] : '', ); } public function get_background_elements() { return array( 'element' => isset($this->_settings['backgrounds']['element']) ? $this->_settings['backgrounds']['element'] : '#background', ); } }