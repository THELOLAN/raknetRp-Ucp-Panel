<?php
 class Platform_Css { protected $_reference_color = array(255, 255, 255); public function auto($css) { if( Platform::exists('Platform/StylePicker') ) { return $this->with_switcher($css); } else { return $this->standard($css); } } public function with_switcher($css) { if( $css['import'] ) { if( Platform::toolbox()->settings['use_minify'] ) { $minify = array(); } $out = ''; foreach($css['import'] as $data) { if( Platform::toolbox()->settings['use_minify'] && ( !$data['attributes'] || stripos($data['attributes'], 'screen') !== false ) ) { $minify[] = $data['content']; } else { $data['attributes'] = Platform::style_picker()->filter_attributes($data['attributes']); if( strpos($data['attributes'], 'rel') === false ) { $data['attributes'] .= ' rel="stylesheet"'; } $out .= '<link type="text/css" ' . $data['attributes'] . ' href="' . $data['content'] . '" />'; } } if( Platform::toolbox()->settings['use_minify'] && count($minify) ) { $out = '<link rel="stylesheet" type="text/css" media="screen" href="' . Platform::toolbox()->settings['public_dir'] . 'min/index.php?ipbv=' . trim(ipsRegistry::$vn_full) . '&amp;f=' . str_replace( Platform::toolbox()->settings['public_dir'], 'public/', implode(',', $minify) ) . '" />' . $out; } } if( is_array($css['inline']) && count($css['inline']) ) { foreach($css['inline'] as $data) { $out .= '<style type="text/css" ' . Platform::style_picker()->filter_attributes($data['attributes']) . '>'; $out .= $data['content']; $out .= '</style>'; } } $out .= '<!--[if lte IE 7]>' . "\n" . '<link rel="stylesheet" type="text/css" title="Main" media="screen" href="' . Platform::toolbox()->settings['public_dir'] . 'style_css/' . Platform::toolbox()->registry->output->skin['_csscacheid'] . '/ipb_ie.css" />' . "\n" . '<![endif]-->'; $out .= '<!--[if lte IE 8]>
              <style type="text/css">
                .ipb_table { table-layout: fixed; }
                .ipsLayout_content { width: 99.5%; }
              </style>
            <![endif]-->'; if( Platform::toolbox()->settings['resize_img_force'] ) { $out .= '
        <!-- Forces resized images to an admin-defined size -->
        <style type="text/css">
          img.bbc_img {
            max-width: ' . $this->settings['resize_img_force'] . 'px !important;
            max-height: ' . $this->settings['resize_img_force'] . 'px !important;
          }
        </style>'; } else { $out .= '<style type="text/css">
    img.bbc_img { max-width: 100% !important; }
  </style>'; } $out .= '<style type="text/css">' . Platform::state()->css() . '</style>'; return $out; } public function standard($css) { $out = ''; if( is_array($css['import']) ) { if( Platform::toolbox()->settings['use_minify'] ) { $miniy = array(); } $path = null; $list = array(); foreach( $css['import'] as $data ) { $filename = $data['content']; $list[] = $filename; if( $path === null ) { $path = explode('/', $data['content']); array_pop($path); $path = implode('/', $path); } if( Platform::toolbox()->settings['use_minify'] && ( !$data['attributes'] OR stripos($data['attributes'], 'screen') !== false ) ) { $minify[] = $data['content']; } else { $out .= '<link rel="stylesheet" type="text/css" ' . $data['attributes'] . ' href="' . $data['content'] . '" />'; } } if( Platform::toolbox()->settings['use_minify'] && count($minify) ) { if( !in_array($path . '/platform.css', $minify) ) { $minify[] = $path . '/platform.css'; } if( !in_array($path . '/theme.css', $minify) ) { $minify[] = $path. '/theme.css'; } $out .= '<link rel="stylesheet" type="text/css" media="screen" href="' . Platform::toolbox()->settings['public_dir'] . 'min/index.php?ipbv=' . trim(ipsRegistry::$vn_full) . '&amp;f=' . str_replace( Platform::toolbox()->settings['public_dir'], 'public/', implode(',', $minify) ) . '" />'; } else { if( !in_array($path . '/platform.css', $list) ) { $out .= '<link rel="stylesheet" type="text/css" href="' . $path . '/platform.css" />'; } if( !in_array($path . '/theme.css', $list) ) { $out .= '<link rel="stylesheet" type="text/css" href="' . $path . '/theme.css" />'; } } } if( is_array($css['inline']) && count($css['inline']) ) { foreach($css['inline'] as $data) { $out .= '<style type="text/css" ' . $data['attributes'] . '>' . "\n" . ' ' . $data['content'] . "\n" . '</style>'; } } $out .= '<!--[if lte IE 7]>' . "\n" . '<link rel="stylesheet" type="text/css" title="Main" media="screen" href="' . Platform::toolbox()->settings['public_dir'] . 'style_css/' . Platform::toolbox()->registry->output->skin['_csscacheid'] . '/ipb_ie.css" />' . "\n" . '<![endif]-->'; $out .= '<!--[if lte IE 8]>
              <style type="text/css">
                .ipb_table { table-layout: fixed; }
                .ipsLayout_content { width: 99.5%; }
              </style>
            <![endif]-->'; if( Platform::toolbox()->settings['resize_img_force'] ) { $out .= '
        <!-- Forces resized images to an admin-defined size -->
        <style type="text/css">
          img.bbc_img {
            max-width: ' . $this->settings['resize_img_force'] . 'px !important;
            max-height: ' . $this->settings['resize_img_force'] . 'px !important;
          }
        </style>'; } else { $out .= '<style type="text/css">
    img.bbc_img { max-width: 100% !important; }
  </style>'; } if( Platform::toolbox()->settings['member_topic_avatar_max'] ) { $out .= '<style type="text/css">
			.ipsUserPhoto_variable { max-width: ' . intval(Platform::toolbox()->settings['member_topic_avatar_max']) . 'px !important; }
			.post_body { margin-left: ' . intval(Platform::toolbox()->settings['member_topic_avatar_max'] + 25 ) . 'px !important; }
		</style>'; } $out .= '<style type="text/css">' . Platform::state()->css() . '</style>'; $cache_control = IPS_PUBLIC_PATH . 'style_css/' . Platform::toolbox()->registry->output->skin['_csscacheid'] . '/cache_control'; $queue = array(); if( file_exists($cache_control) ) { $mtime = (int) file_get_contents($cache_control); $len = count($list); for($i = 0; $i < $len; $i++) { $list[$i] = str_replace( Platform::toolbox()->settings['public_dir'], IPS_PUBLIC_PATH, $list[$i] ); if( filemtime($list[$i]) > $mtime ) { $queue[] = $list[$i]; } } } else { $queue = $list; } $len = count($queue); $mtime = time(); if( $len !== 0 ) { if( file_exists($cache_control) ) { unlink($cache_control); } file_put_contents($cache_control, $mtime); for( $i = 0; $i < $len; $i++ ) { $this->_process($queue[$i]); touch($queue[$i], $mtime); } } return $out; } protected function _process($file) { $code = file_get_contents($file); $code = preg_replace('`\/\*(.+)\*\/`isU', '', $code); $code = preg_replace_callback('`\@\-sb\-([a-z0-9-]+)\s+([^;]+);`isU', array($this, 'dispatch_instruction'), $code); $code = preg_replace_callback('`(' . "\n" . ')([^;{}]+)-sb-([^;{}]+)\(([^;{}]+)\)([^;{}]+)?;`isU', array($this, 'dispatch_function'), $code); file_put_contents($file, $code); } public function dispatch_instruction($matches) { $instruction = str_replace('-', '_', $matches[1]); if( !method_exists($this, 'instruction_' . $instruction) ) { return '/** WARNING: Invalid statement ' . $matches[0]. ' **/'; } return $this->{'instruction_' . $instruction}($matches[2]); } public function dispatch_function($matches) { $line = $matches[2] . '-sb-' . $matches[3] . '(' . $matches[4] . ')' . $matches[5] . ';'; $arg = $matches[4]; $function = $matches[3]; $call = '-sb-' . $matches[3] . '(' . $matches[4] . ');'; $function = str_replace('-', '_', $function); if( !method_exists($this, 'function_' . $function) ) { return $matches[1] . '/** WARNING: Invalid statement: ' . $line . ' **/'; } $o = $matches[1] . $this->{'function_' . $function}($arg, $call, $line); return $o; } public function instruction_sprite($spritename) { return $this->_load_sprite($spritename); } public function instruction_reference_color($color) { $this->_reference_color = $this->_parse_color($color); } public function function_rgba($colors, $call, $line) { $color = $this->_parse_color('rgba(' . $colors . ')'); $fallback = $this->_rgba2rgb($color); if( strpos($line, 'background') !== false || strpos($line, 'color') !== false || strpos($line, 'border') !== false ) { $fallback = $this->_rgba2rgb($color); return str_replace($call, 'rgb(' . $fallback[0] . ',' . $fallback[1] . ',' . $fallback[2] . ')', $line) . "\n" . str_replace($call, 'rgba(' . $color[0] . ',' . $color[1] . ',' . $color[2] . ',' . $color[3] . ')', $line); } else { return str_replace('-sb-rgba', 'rgba', $line); } } public function _load_sprite($name) { $root = Platform::root() . '../_sprites/' . $name . '/'; $dh = opendir($root); $images = array(); while( $f = readdir($dh) ) { if( $f === '.' || $f === '..' ) { continue; } $ext = substr($f, -4); if( $ext !== '.png' ) { continue; } $size = getimagesize($root . $f); $images[] = array( substr($f, 0, strlen($f)-4), $size[0], $size[1], ); } return $this->_process_sprite($root, $name, $images); } protected function _process_sprite($root, $name, $images) { $width = 0; $height = 0; $maxheight = 0; $instructions = array(); $css = ''; foreach($images as $image) { list($n, $w, $h) = $image; $css .= '.sprite-' . $name . '-' . $n . ' {
        width: ' . $w . 'px;
        height: ' . $h . 'px;
        background-position: -' . $width . 'px 0px;
        background-image: url(' . Platform::toolbox()->registry->output->settings['img_url'] . '/_cache/sprite.' . $name . '.png);
      }'; $instructions[] = array($n, $w, $h, $width, $height); $width += $image[1]; if( $image[2] > $maxheight ) { $maxheight = $image[2]; } } $sprite = imagecreatetruecolor($width, $maxheight); imagealphablending($sprite, false); imagesavealpha($sprite, true); $transparent = imagecolorallocatealpha($sprite, 0, 0, 0, 127); imagefill($sprite, 0, 0, $transparent); foreach($instructions as $instruction) { list($n, $w, $h, $x, $y) = $instruction; $current = imagecreatefrompng($root . $n . '.png'); imagecopy($sprite, $current, $x, $y, 0, 0, $w, $h); imagedestroy($current); } imagepng($sprite, Platform::root() . '../_cache/sprite.' . $name . '.png', 0, PNG_FILTER_NONE); return $css; } protected function _parse_color($color) { if( substr($color, 0, 3) === 'rgb' ) { if( $color{3} === 'a' ) { $array = substr($color, 5, strlen($color)-6); $array = explode(',', $array, 4); $array[3] = (float) $array[3]; } else { $array = substr($color, 4, strlen($color)-5); $array = explode(',', $array, 3); } $array[0] = (int) $array[0]; $array[1] = (int) $array[1]; $array[2] = (int) $array[2]; } elseif( $color{0} === '#' ) { $color = substr($color, 1); $color = trim($color); if( strlen($color) === 3 ) { $hex = array( $color{0} . $color{0}, $color{1} . $color{1}, $color{2} . $color{2}, ); } else { $hex = array( $color{0} . $color{1}, $color{2} . $color{3}, $color{4} . $color{5}, ); } $array[0] = hexdec($hex[0]); $array[1] = hexdec($hex[1]); $array[2] = hexdec($hex[2]); } if( !count($array) >= 3 ) { return false; } return $array; } protected function _rgba2rgb($array) { list($r, $g, $b, $a) = $array; list($rr, $rg, $rb) = $this->_reference_color; $rr = 255; $rg = 255; $rb = 255; $r = ((1.0 - $a) * ($r / 255)) + ($a * ($rr / 255)); $b = ((1.0 - $a) * ($b / 255)) + ($a * ($rg / 255)); $g = ((1.0 - $a) * ($g / 255)) + ($a * ($rb / 255)); return array($r, $g, $b); } }